{"ast":null,"code":"import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\n\nvar serializeCellValue = function serializeCellValue(value, delimiterCharacter) {\n  if (typeof value === 'string') {\n    var formattedValue = value.replace(/\"/g, '\"\"'); // Make sure value containing delimiter or line break won't be split into multiple rows\n\n    if ([delimiterCharacter, '\\n', '\\r'].some(function (delimiter) {\n      return formattedValue.includes(delimiter);\n    })) {\n      return \"\\\"\".concat(formattedValue, \"\\\"\");\n    }\n\n    return formattedValue;\n  }\n\n  return value;\n};\n\nvar objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nvar serializeRow = function serializeRow(id, columns, getCellParams, delimiterCharacter) {\n  return columns.map(function (column) {\n    var cellParams = getCellParams(id, column.field);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (String(cellParams.formattedValue) === '[object Object]') {\n        objectFormattedValueWarning();\n      }\n    }\n\n    return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n  });\n};\n\nexport function buildCSV(options) {\n  var columns = options.columns,\n      rowIds = options.rowIds,\n      getCellParams = options.getCellParams,\n      delimiterCharacter = options.delimiterCharacter,\n      includeHeaders = options.includeHeaders;\n  var CSVBody = rowIds.reduce(function (acc, id) {\n    return \"\".concat(acc).concat(serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter), \"\\r\\n\");\n  }, '').trim();\n\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n\n  var CSVHead = \"\".concat(columns.filter(function (column) {\n    return column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field;\n  }).map(function (column) {\n    return serializeCellValue(column.headerName || column.field, delimiterCharacter);\n  }).join(delimiterCharacter), \"\\r\\n\");\n  return \"\".concat(CSVHead).concat(CSVBody).trim();\n}","map":{"version":3,"names":["GRID_CHECKBOX_SELECTION_COL_DEF","buildWarning","serializeCellValue","value","delimiterCharacter","formattedValue","replace","some","delimiter","includes","objectFormattedValueWarning","serializeRow","id","columns","getCellParams","map","column","cellParams","field","process","env","NODE_ENV","String","buildCSV","options","rowIds","includeHeaders","CSVBody","reduce","acc","join","trim","CSVHead","filter","headerName"],"sources":["C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js"],"sourcesContent":["import { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../../colDef';\nimport { buildWarning } from '../../../../utils/warning';\n\nconst serializeCellValue = (value, delimiterCharacter) => {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"'); // Make sure value containing delimiter or line break won't be split into multiple rows\n\n    if ([delimiterCharacter, '\\n', '\\r'].some(delimiter => formattedValue.includes(delimiter))) {\n      return `\"${formattedValue}\"`;\n    }\n\n    return formattedValue;\n  }\n\n  return value;\n};\n\nconst objectFormattedValueWarning = buildWarning(['MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.', 'You can provide a `valueFormatter` with a string representation to be used.']);\n\nconst serializeRow = (id, columns, getCellParams, delimiterCharacter) => columns.map(column => {\n  const cellParams = getCellParams(id, column.field);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (String(cellParams.formattedValue) === '[object Object]') {\n      objectFormattedValueWarning();\n    }\n  }\n\n  return serializeCellValue(cellParams.formattedValue, delimiterCharacter);\n});\n\nexport function buildCSV(options) {\n  const {\n    columns,\n    rowIds,\n    getCellParams,\n    delimiterCharacter,\n    includeHeaders\n  } = options;\n  const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow(id, columns, getCellParams, delimiterCharacter).join(delimiterCharacter)}\\r\\n`, '').trim();\n\n  if (!includeHeaders) {\n    return CSVBody;\n  }\n\n  const CSVHead = `${columns.filter(column => column.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field).map(column => serializeCellValue(column.headerName || column.field, delimiterCharacter)).join(delimiterCharacter)}\\r\\n`;\n  return `${CSVHead}${CSVBody}`.trim();\n}"],"mappings":"AAAA,SAASA,+BAAT,QAAgD,oBAAhD;AACA,SAASC,YAAT,QAA6B,2BAA7B;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,kBAAR,EAA+B;EACxD,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;IAC7B,IAAME,cAAc,GAAGF,KAAK,CAACG,OAAN,CAAc,IAAd,EAAoB,IAApB,CAAvB,CAD6B,CACqB;;IAElD,IAAI,CAACF,kBAAD,EAAqB,IAArB,EAA2B,IAA3B,EAAiCG,IAAjC,CAAsC,UAAAC,SAAS;MAAA,OAAIH,cAAc,CAACI,QAAf,CAAwBD,SAAxB,CAAJ;IAAA,CAA/C,CAAJ,EAA4F;MAC1F,mBAAWH,cAAX;IACD;;IAED,OAAOA,cAAP;EACD;;EAED,OAAOF,KAAP;AACD,CAZD;;AAcA,IAAMO,2BAA2B,GAAGT,YAAY,CAAC,CAAC,kIAAD,EAAqI,6EAArI,CAAD,CAAhD;;AAEA,IAAMU,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAKC,OAAL,EAAcC,aAAd,EAA6BV,kBAA7B;EAAA,OAAoDS,OAAO,CAACE,GAAR,CAAY,UAAAC,MAAM,EAAI;IAC7F,IAAMC,UAAU,GAAGH,aAAa,CAACF,EAAD,EAAKI,MAAM,CAACE,KAAZ,CAAhC;;IAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzC,IAAIC,MAAM,CAACL,UAAU,CAACZ,cAAZ,CAAN,KAAsC,iBAA1C,EAA6D;QAC3DK,2BAA2B;MAC5B;IACF;;IAED,OAAOR,kBAAkB,CAACe,UAAU,CAACZ,cAAZ,EAA4BD,kBAA5B,CAAzB;EACD,CAVwE,CAApD;AAAA,CAArB;;AAYA,OAAO,SAASmB,QAAT,CAAkBC,OAAlB,EAA2B;EAChC,IACEX,OADF,GAMIW,OANJ,CACEX,OADF;EAAA,IAEEY,MAFF,GAMID,OANJ,CAEEC,MAFF;EAAA,IAGEX,aAHF,GAMIU,OANJ,CAGEV,aAHF;EAAA,IAIEV,kBAJF,GAMIoB,OANJ,CAIEpB,kBAJF;EAAA,IAKEsB,cALF,GAMIF,OANJ,CAKEE,cALF;EAOA,IAAMC,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAc,UAACC,GAAD,EAAMjB,EAAN;IAAA,iBAAgBiB,GAAhB,SAAsBlB,YAAY,CAACC,EAAD,EAAKC,OAAL,EAAcC,aAAd,EAA6BV,kBAA7B,CAAZ,CAA6D0B,IAA7D,CAAkE1B,kBAAlE,CAAtB;EAAA,CAAd,EAAiI,EAAjI,EAAqI2B,IAArI,EAAhB;;EAEA,IAAI,CAACL,cAAL,EAAqB;IACnB,OAAOC,OAAP;EACD;;EAED,IAAMK,OAAO,aAAMnB,OAAO,CAACoB,MAAR,CAAe,UAAAjB,MAAM;IAAA,OAAIA,MAAM,CAACE,KAAP,KAAiBlB,+BAA+B,CAACkB,KAArD;EAAA,CAArB,EAAiFH,GAAjF,CAAqF,UAAAC,MAAM;IAAA,OAAId,kBAAkB,CAACc,MAAM,CAACkB,UAAP,IAAqBlB,MAAM,CAACE,KAA7B,EAAoCd,kBAApC,CAAtB;EAAA,CAA3F,EAA0K0B,IAA1K,CAA+K1B,kBAA/K,CAAN,SAAb;EACA,OAAO,UAAG4B,OAAH,SAAaL,OAAb,EAAuBI,IAAvB,EAAP;AACD"},"metadata":{},"sourceType":"module"}