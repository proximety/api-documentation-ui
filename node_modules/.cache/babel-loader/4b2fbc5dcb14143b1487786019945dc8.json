{"ast":null,"code":"import _defineProperty from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport var useCellEditing = function useCellEditing(apiRef, props) {\n  var _props$experimentalFe2;\n\n  var logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  var buildCallback = function buildCallback(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Cell) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n\n  var setCellMode = React.useCallback(function (id, field, mode) {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(\"Switching cell id: \".concat(id, \" field: \").concat(field, \" to mode: \").concat(mode));\n    apiRef.current.setState(function (state) {\n      var newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('cellModeChange', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  var getCellMode = React.useCallback(function (id, field) {\n    var editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  var commitCellChange = React.useCallback(function (params) {\n    var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _props$experimentalFe;\n\n    var id = params.id,\n        field = params.field;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    var model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(\"MUI: Cell at id: \".concat(id, \" and field: \").concat(field, \" is not in edit mode.\"));\n    }\n\n    var editCellProps = model[id][field];\n    var column = apiRef.current.getColumn(field);\n    var row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      var cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    var commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    var hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      var result = column.preProcessEditCellProps({\n        id: id,\n        row: row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(function (newEditCellProps) {\n          apiRef.current.unstable_setEditCellProps({\n            id: id,\n            field: field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id: id,\n        field: field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  var setCellEditingEditCellValue = React.useCallback(function (params) {\n    var column = apiRef.current.getColumn(params.field);\n    var row = apiRef.current.getRow(params.id);\n    return new Promise(function (resolve) {\n      var newEditCellProps = {\n        value: params.value\n      };\n      var model = apiRef.current.getEditRowsModel();\n      var editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row: row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(function (newEditCellPropsProcessed) {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  var cellEditingApi = {\n    setCellMode: setCellMode,\n    getCellMode: getCellMode,\n    commitCellChange: commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  var handleCellKeyDown = React.useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params, event) {\n      var id, field, cellMode, isEditable, isEditMode, isModifierKeyPressed, commitParams, isValid;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(event.which === 229)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              id = params.id, field = params.field, cellMode = params.cellMode, isEditable = params.isEditable;\n\n              if (isEditable) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              isEditMode = cellMode === GridCellModes.Edit;\n              isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n              if (!isEditMode && isCellEnterEditModeKeys(event) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n                apiRef.current.publishEvent('cellEditStart', params, event);\n              }\n\n              if (!isEditMode && isDeleteKeys(event.key)) {\n                apiRef.current.setEditCellValue({\n                  id: id,\n                  field: field,\n                  value: ''\n                });\n                apiRef.current.commitCellChange({\n                  id: id,\n                  field: field\n                }, event);\n                apiRef.current.publishEvent('cellEditStop', params, event);\n              }\n\n              if (!(isEditMode && isCellEditCommitKeys(event.key))) {\n                _context.next = 16;\n                break;\n              }\n\n              commitParams = {\n                id: id,\n                field: field\n              };\n              _context.next = 13;\n              return apiRef.current.commitCellChange(commitParams, event);\n\n            case 13:\n              isValid = _context.sent;\n\n              if (isValid) {\n                _context.next = 16;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 16:\n              if (isEditMode && isCellExitEditModeKeys(event.key)) {\n                apiRef.current.publishEvent('cellEditStop', params, event);\n              }\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellEditStart', params, event);\n  }, [apiRef]);\n\n  var commitPropsAndExit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params, event) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(params.cellMode === GridCellModes.View)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _context2.next = 4;\n              return apiRef.current.commitCellChange(params, event);\n\n            case 4:\n              apiRef.current.publishEvent('cellEditStop', params, event);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function commitPropsAndExit(_x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleCellFocusOut = useEventCallback(function (params, event) {\n    commitPropsAndExit(params, event);\n  });\n  var handleColumnHeaderDragStart = useEventCallback(function () {\n    var cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    var params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  var handleCellEditStart = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  var handleCellEditStop = React.useCallback(function (params, event) {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  var handleCellEditCommit = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field;\n    var model = apiRef.current.getEditRowsModel();\n    var value = model[id][field].value;\n    logger.debug(\"Setting cell id: \".concat(id, \" field: \").concat(field, \" to value: \").concat(value == null ? void 0 : value.toString()));\n    var row = apiRef.current.getRow(id);\n\n    if (row) {\n      var column = apiRef.current.getColumn(params.field);\n\n      var rowUpdate = _extends({}, row, _defineProperty({}, field, value));\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row: row,\n          value: value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  var handleEditCellPropsChange = React.useCallback(function (params) {\n    var row = apiRef.current.getRow(params.id);\n    var column = apiRef.current.getColumn(params.field);\n    var editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row: row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(function (newEditCellProps) {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, 'cellEditStart', buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, 'cellEditCommit', buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, 'cellEditCommit', props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n};","map":{"version":3,"names":["_extends","React","useEventCallback","useGridApiOptionHandler","useGridApiEventHandler","GridCellModes","GridEditModes","isKeyboardEvent","isPrintableKey","isCellEnterEditModeKeys","isCellExitEditModeKeys","isCellEditCommitKeys","isDeleteKeys","useGridLogger","gridFocusCellSelector","useGridApiMethod","gridEditRowsStateSelector","isPromise","promise","then","useCellEditing","apiRef","props","_props$experimentalFe2","logger","buildCallback","callback","editMode","Cell","setCellMode","useCallback","id","field","mode","current","getCellMode","debug","setState","state","newEditRowsState","editRows","Edit","value","getCellValue","Object","keys","length","forceUpdate","publishEvent","getCellParams","editRowsState","isEditing","View","commitCellChange","params","event","_props$experimentalFe","unstable_runPendingEditCellValueMutation","model","getEditRowsModel","Error","editCellProps","column","getColumn","row","getRow","experimentalFeatures","preventCommitWhileValidating","cellProps","isValidating","error","commitParams","hasError","preProcessEditCellProps","result","newEditCellProps","unstable_setEditCellProps","setCellEditingEditCellValue","Promise","resolve","unstable_parseValue","newEditCellPropsProcessed","cellEditingApi","unstable_setCellEditingEditCellValue","handleCellKeyDown","which","cellMode","isEditable","isEditMode","isModifierKeyPressed","ctrlKey","metaKey","altKey","key","shiftKey","setEditCellValue","isValid","handleCellDoubleClick","commitPropsAndExit","handleCellFocusOut","handleColumnHeaderDragStart","cell","handleCellEditStart","handleCellEditStop","setCellFocus","handleCellEditCommit","toString","rowUpdate","valueSetter","updateRows","handleEditCellPropsChange","onCellEditCommit","onCellEditStart","onCellEditStop"],"sources":["C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.old.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes, GridEditModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isPrintableKey, isCellEnterEditModeKeys, isCellExitEditModeKeys, isCellEditCommitKeys, isDeleteKeys } from '../../../utils/keyboardUtils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\n\nfunction isPromise(promise) {\n  return typeof promise.then === 'function';\n}\n\nexport const useCellEditing = (apiRef, props) => {\n  var _props$experimentalFe2;\n\n  const logger = useGridLogger(apiRef, 'useGridEditRows');\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const setCellMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) === mode) {\n      return;\n    }\n\n    logger.debug(`Switching cell id: ${id} field: ${field} to mode: ${mode}`);\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      newEditRowsState[id] = _extends({}, newEditRowsState[id]);\n\n      if (mode === GridCellModes.Edit) {\n        newEditRowsState[id][field] = {\n          value: apiRef.current.getCellValue(id, field)\n        };\n      } else {\n        delete newEditRowsState[id][field];\n\n        if (!Object.keys(newEditRowsState[id]).length) {\n          delete newEditRowsState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('cellModeChange', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger]);\n  const getCellMode = React.useCallback((id, field) => {\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editRowsState[id] && editRowsState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]); // TODO v6: it should always return a promise\n\n  const commitCellChange = React.useCallback((params, event = {}) => {\n    var _props$experimentalFe;\n\n    const {\n      id,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    const model = apiRef.current.getEditRowsModel();\n\n    if (!model[id] || !model[id][field]) {\n      throw new Error(`MUI: Cell at id: ${id} and field: ${field} is not in edit mode.`);\n    }\n\n    const editCellProps = model[id][field];\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const cellProps = model[id][field];\n\n      if (cellProps.isValidating || cellProps.error) {\n        return false;\n      }\n    }\n\n    const commitParams = _extends({}, params, {\n      value: editCellProps.value\n    });\n\n    let hasError = !!editCellProps.error;\n\n    if (!hasError && typeof column.preProcessEditCellProps === 'function') {\n      const result = column.preProcessEditCellProps({\n        id,\n        row,\n        props: editCellProps\n      });\n\n      if (isPromise(result)) {\n        return result.then(newEditCellProps => {\n          apiRef.current.unstable_setEditCellProps({\n            id,\n            field,\n            props: newEditCellProps\n          });\n\n          if (newEditCellProps.error) {\n            return false;\n          }\n\n          apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n          return true;\n        });\n      }\n\n      apiRef.current.unstable_setEditCellProps({\n        id,\n        field,\n        props: result\n      });\n      hasError = !!result.error;\n    }\n\n    if (!hasError) {\n      apiRef.current.publishEvent('cellEditCommit', commitParams, event);\n      return true;\n    }\n\n    return false;\n  }, [apiRef, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setCellEditingEditCellValue = React.useCallback(params => {\n    const column = apiRef.current.getColumn(params.field);\n    const row = apiRef.current.getRow(params.id);\n    return new Promise(resolve => {\n      let newEditCellProps = {\n        value: params.value\n      };\n      const model = apiRef.current.getEditRowsModel();\n      const editCellProps = model[params.id][params.field];\n\n      if (typeof column.preProcessEditCellProps !== 'function') {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n        resolve(true);\n        return;\n      } // setEditCellProps runs the value parser and returns the updated props\n\n\n      newEditCellProps = apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: _extends({}, editCellProps, {\n          isValidating: true\n        })\n      }));\n      Promise.resolve(column.preProcessEditCellProps({\n        id: params.id,\n        row,\n        props: _extends({}, newEditCellProps, {\n          value: apiRef.current.unstable_parseValue(params.id, params.field, params.value)\n        })\n      })).then(newEditCellPropsProcessed => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: _extends({}, newEditCellPropsProcessed, {\n            isValidating: false\n          })\n        }));\n        resolve(!newEditCellPropsProcessed.error);\n      });\n    });\n  }, [apiRef]);\n  const cellEditingApi = {\n    setCellMode,\n    getCellMode,\n    commitCellChange,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, cellEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    // Wait until IME is settled for Asian languages like Japanese and Chinese\n    // TODO: `event.which` is depricated but this is a temporary workaround\n    if (event.which === 229) {\n      return;\n    }\n\n    const {\n      id,\n      field,\n      cellMode,\n      isEditable\n    } = params;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey || event.altKey;\n\n    if (!isEditMode && isCellEnterEditModeKeys(event) && !isModifierKeyPressed && !(event.key === ' ' && event.shiftKey)) {\n      apiRef.current.publishEvent('cellEditStart', params, event);\n    }\n\n    if (!isEditMode && isDeleteKeys(event.key)) {\n      apiRef.current.setEditCellValue({\n        id,\n        field,\n        value: ''\n      });\n      apiRef.current.commitCellChange({\n        id,\n        field\n      }, event);\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n\n    if (isEditMode && isCellEditCommitKeys(event.key)) {\n      const commitParams = {\n        id,\n        field\n      };\n      const isValid = await apiRef.current.commitCellChange(commitParams, event);\n\n      if (!isValid) {\n        return;\n      }\n    }\n\n    if (isEditMode && isCellExitEditModeKeys(event.key)) {\n      apiRef.current.publishEvent('cellEditStop', params, event);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.publishEvent('cellEditStart', params, event);\n  }, [apiRef]);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    await apiRef.current.commitCellChange(params, event);\n    apiRef.current.publishEvent('cellEditStop', params, event);\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  const handleCellEditStart = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.Edit);\n\n    if (isKeyboardEvent(event) && isPrintableKey(event)) {\n      apiRef.current.unstable_setEditCellProps({\n        id: params.id,\n        field: params.field,\n        props: {\n          value: ''\n        }\n      });\n    }\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback((params, event) => {\n    apiRef.current.setCellMode(params.id, params.field, GridCellModes.View);\n\n    if (!isKeyboardEvent(event)) {\n      return;\n    }\n\n    if (isCellEditCommitKeys(event.key)) {\n      apiRef.current.publishEvent('cellNavigationKeyDown', params, event);\n      return;\n    }\n\n    if (event.key === 'Escape' || isDeleteKeys(event.key)) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleCellEditCommit = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params;\n    const model = apiRef.current.getEditRowsModel();\n    const {\n      value\n    } = model[id][field];\n    logger.debug(`Setting cell id: ${id} field: ${field} to value: ${value == null ? void 0 : value.toString()}`);\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      const column = apiRef.current.getColumn(params.field);\n\n      let rowUpdate = _extends({}, row, {\n        [field]: value\n      });\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          row,\n          value\n        });\n      }\n\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef, logger]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const column = apiRef.current.getColumn(params.field);\n    const editCellProps = column.preProcessEditCellProps ? column.preProcessEditCellProps({\n      id: params.id,\n      row,\n      props: params.props\n    }) : params.props;\n\n    if (isPromise(editCellProps)) {\n      editCellProps.then(newEditCellProps => {\n        apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n          props: newEditCellProps\n        }));\n      });\n    } else {\n      apiRef.current.unstable_setEditCellProps(_extends({}, params, {\n        props: editCellProps\n      }));\n    }\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', buildCallback(handleColumnHeaderDragStart));\n  useGridApiEventHandler(apiRef, 'cellEditStart', buildCallback(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', buildCallback(handleCellEditStop));\n  useGridApiEventHandler(apiRef, 'cellEditCommit', buildCallback(handleCellEditCommit));\n  useGridApiEventHandler(apiRef, 'editCellPropsChange', buildCallback(handleEditCellPropsChange));\n  useGridApiOptionHandler(apiRef, 'cellEditCommit', props.onCellEditCommit);\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}