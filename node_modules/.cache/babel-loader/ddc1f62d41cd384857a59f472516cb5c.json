{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"id\", \"field\"],\n    _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nvar missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport var useGridCellEditing = function useGridCellEditing(apiRef, props) {\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cellModesModel = _React$useState2[0],\n      setCellModesModel = _React$useState2[1];\n\n  var cellModesModelRef = React.useRef(cellModesModel);\n  var prevCellModesModel = React.useRef({});\n  var processRowUpdate = props.processRowUpdate,\n      onProcessRowUpdateError = props.onProcessRowUpdateError,\n      cellModesModelProp = props.cellModesModel,\n      onCellModesModelChange = props.onCellModesModelChange,\n      signature = props.signature;\n\n  var runIfEditModeIsCell = function runIfEditModeIsCell(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Cell) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n\n  var throwIfNotEditable = React.useCallback(function (id, field) {\n    var params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  var throwIfNotInMode = React.useCallback(function (id, field, mode) {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    var newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  var handleCellFocusOut = React.useCallback(function (params, event) {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n\n    var newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      var reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        var newParams = _extends({}, params, {\n          reason: reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      var _reason;\n\n      if (isPrintableKey(event)) {\n        _reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        _reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        _reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        _reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (_reason) {\n        var _newParams = _extends({}, params, {\n          reason: _reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', _newParams, event);\n      }\n    }\n  }, [apiRef]);\n  var handleCellEditStart = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        reason = params.reason;\n    var startCellEditModeParams = {\n      id: id,\n      field: field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  var handleCellEditStop = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        reason = params.reason;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    var cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    var ignoreModifications = reason === 'escapeKeyDown';\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id: id,\n      field: field,\n      ignoreModifications: ignoreModifications,\n      cellToFocusAfter: cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  var getCellMode = React.useCallback(function (id, field) {\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  var updateCellModesModel = React.useCallback(function (newModel) {\n    var isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      var details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  var updateFieldInCellModesModel = React.useCallback(function (id, field, newProps) {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    var newModel = _extends({}, cellModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], _defineProperty({}, field, _extends({}, newProps)));\n    } else {\n      var _newModel$id = newModel[id],\n          otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  var updateOrDeleteFieldState = React.useCallback(function (id, field, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], _defineProperty({}, field, _extends({}, newProps)));\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var startCellEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  var updateStateToStartCellEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        deleteValue = params.deleteValue;\n    var newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  var stopCellEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  var updateStateToStopCellEditMode = React.useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n      var id, field, ignoreModifications, _params$cellToFocusAf, cellToFocusAfter, finishCellEditMode, editingState, _editingState$id$fiel2, error, isProcessingProps, rowUpdate, handleError, row;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = params.id, field = params.field, ignoreModifications = params.ignoreModifications, _params$cellToFocusAf = params.cellToFocusAfter, cellToFocusAfter = _params$cellToFocusAf === void 0 ? 'none' : _params$cellToFocusAf;\n              throwIfNotInMode(id, field, GridCellModes.Edit);\n              apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n              finishCellEditMode = function finishCellEditMode() {\n                updateOrDeleteFieldState(id, field, null);\n                updateFieldInCellModesModel(id, field, null);\n\n                if (cellToFocusAfter !== 'none') {\n                  apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n                }\n              };\n\n              if (!ignoreModifications) {\n                _context.next = 7;\n                break;\n              }\n\n              finishCellEditMode();\n              return _context.abrupt(\"return\");\n\n            case 7:\n              editingState = gridEditRowsStateSelector(apiRef.current.state);\n              _editingState$id$fiel2 = editingState[id][field], error = _editingState$id$fiel2.error, isProcessingProps = _editingState$id$fiel2.isProcessingProps;\n\n              if (!(error || isProcessingProps)) {\n                _context.next = 12;\n                break;\n              }\n\n              // Attempt to change cell mode to \"view\" was not successful\n              // Update previous mode to allow another attempt\n              prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n              return _context.abrupt(\"return\");\n\n            case 12:\n              rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n              if (processRowUpdate) {\n                handleError = function handleError(errorThrown) {\n                  prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n                  if (onProcessRowUpdateError) {\n                    onProcessRowUpdateError(errorThrown);\n                  } else {\n                    missingOnProcessRowUpdateErrorWarning();\n                  }\n                };\n\n                try {\n                  row = apiRef.current.getRow(id);\n                  Promise.resolve(processRowUpdate(rowUpdate, row)).then(function (finalRowUpdate) {\n                    apiRef.current.updateRows([finalRowUpdate]);\n                    finishCellEditMode();\n                  }).catch(handleError);\n                } catch (errorThrown) {\n                  handleError(errorThrown);\n                }\n              } else {\n                apiRef.current.updateRows([rowUpdate]);\n                finishCellEditMode();\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  var setCellEditingEditCellValue = React.useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n      var _editingState$id, _editingState$id$fiel, id, field, value, column, row, parsedValue, editingState, newProps, hasChanged;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              id = params.id, field = params.field, value = params.value;\n              throwIfNotEditable(id, field);\n              throwIfNotInMode(id, field, GridCellModes.Edit);\n              column = apiRef.current.getColumn(field);\n              row = apiRef.current.getRow(id);\n              parsedValue = value;\n\n              if (column.valueParser) {\n                parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n              }\n\n              editingState = gridEditRowsStateSelector(apiRef.current.state);\n              newProps = _extends({}, editingState[id][field], {\n                value: parsedValue\n              });\n\n              if (!column.preProcessEditCellProps) {\n                _context2.next = 16;\n                break;\n              }\n\n              hasChanged = value !== editingState[id][field].value;\n              newProps = _extends({}, newProps, {\n                isProcessingProps: true\n              });\n              updateOrDeleteFieldState(id, field, newProps);\n              _context2.next = 15;\n              return Promise.resolve(column.preProcessEditCellProps({\n                id: id,\n                row: row,\n                props: newProps,\n                hasChanged: hasChanged\n              }));\n\n            case 15:\n              newProps = _context2.sent;\n\n            case 16:\n              if (!(apiRef.current.getCellMode(id, field) === GridCellModes.View)) {\n                _context2.next = 18;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", false);\n\n            case 18:\n              editingState = gridEditRowsStateSelector(apiRef.current.state);\n              newProps = _extends({}, newProps, {\n                isProcessingProps: false\n              }); // We don't update the value with the one coming from the props pre-processing\n              // because when the promise resolves it may be already outdated. The only\n              // exception to this rule is when there's no pre-processing.\n\n              newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n              updateOrDeleteFieldState(id, field, newProps);\n              editingState = gridEditRowsStateSelector(apiRef.current.state);\n              return _context2.abrupt(\"return\", !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error));\n\n            case 24:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  var getRowWithUpdatedValuesFromCellEditing = React.useCallback(function (id, field) {\n    var column = apiRef.current.getColumn(field);\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var value = editingState[id][field].value;\n    var row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value: value,\n      row: row\n    }) : _extends({}, row, _defineProperty({}, field, value));\n  }, [apiRef]);\n  var editingApi = {\n    getCellMode: getCellMode,\n    startCellEditMode: startCellEditMode,\n    stopCellEditMode: stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(function () {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(function () {\n    var idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    var copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          id = _ref4[0],\n          fields = _ref4[1];\n\n      Object.entries(fields).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            field = _ref6[0],\n            params = _ref6[1];\n\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        var prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        var originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field: field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field: field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsIdToIdLookupSelector","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","useState","cellModesModel","setCellModesModel","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","signature","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","isProcessingProps","disableIgnoreModificationsIfProcessingProps","stopCellEditMode","onCellEditStart","onCellEditStop","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","value","getCellValue","error","setCellFocus","updateStateToStopCellEditMode","finishCellEditMode","unstable_moveFocusToRelativeCell","rowUpdate","unstable_getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","hasChanged","_editingState$id","_editingState$id$fiel","getRowWithUpdatedValuesFromCellEditing","valueSetter","editingApi","unstable_setCellEditingEditCellValue","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","_copyOfPrevCellModes$","_copyOfPrevCellModes$2","_idToIdLookup$id","prevMode","originalId"],"sources":["C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.new.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue\n    } = params;\n    const newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}