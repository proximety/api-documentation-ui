{"ast":null,"code":"export var isEscapeKey = function isEscapeKey(key) {\n  return key === 'Escape';\n}; // TODO remove\n\nexport var isEnterKey = function isEnterKey(key) {\n  return key === 'Enter';\n}; // TODO remove\n\nexport var isTabKey = function isTabKey(key) {\n  return key === 'Tab';\n}; // TODO remove\n\nexport var isSpaceKey = function isSpaceKey(key) {\n  return key === ' ';\n};\nexport var isArrowKeys = function isArrowKeys(key) {\n  return key.indexOf('Arrow') === 0;\n};\nexport var isHomeOrEndKeys = function isHomeOrEndKeys(key) {\n  return key === 'Home' || key === 'End';\n};\nexport var isPageKeys = function isPageKeys(key) {\n  return key.indexOf('Page') === 0;\n};\nexport var isDeleteKeys = function isDeleteKeys(key) {\n  return key === 'Delete' || key === 'Backspace';\n}; // Non printable keys have a name, e.g. \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// We need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\n\nexport function isPrintableKey(event) {\n  return event.key.length === 1 && event.ctrlKey === false && event.metaKey === false;\n}\nexport var GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nexport var GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nexport var GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nexport var isMultipleKey = function isMultipleKey(key) {\n  return GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\n};\nexport var isCellEnterEditModeKeys = function isCellEnterEditModeKeys(event) {\n  return isEnterKey(event.key) || isDeleteKeys(event.key) || isPrintableKey(event);\n};\nexport var isCellExitEditModeKeys = function isCellExitEditModeKeys(key) {\n  return GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\n};\nexport var isCellEditCommitKeys = function isCellEditCommitKeys(key) {\n  return GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\n};\nexport var isNavigationKey = function isNavigationKey(key) {\n  return isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);\n};\nexport var isKeyboardEvent = function isKeyboardEvent(event) {\n  return !!event.key;\n};\nexport var isHideMenuKey = function isHideMenuKey(key) {\n  return isTabKey(key) || isEscapeKey(key);\n};","map":{"version":3,"names":["isEscapeKey","key","isEnterKey","isTabKey","isSpaceKey","isArrowKeys","indexOf","isHomeOrEndKeys","isPageKeys","isDeleteKeys","isPrintableKey","event","length","ctrlKey","metaKey","GRID_MULTIPLE_SELECTION_KEYS","GRID_CELL_EXIT_EDIT_MODE_KEYS","GRID_CELL_EDIT_COMMIT_KEYS","isMultipleKey","isCellEnterEditModeKeys","isCellExitEditModeKeys","isCellEditCommitKeys","isNavigationKey","isKeyboardEvent","isHideMenuKey"],"sources":["C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@mui/x-data-grid/utils/keyboardUtils.js"],"sourcesContent":["export const isEscapeKey = key => key === 'Escape'; // TODO remove\n\nexport const isEnterKey = key => key === 'Enter'; // TODO remove\n\nexport const isTabKey = key => key === 'Tab'; // TODO remove\n\nexport const isSpaceKey = key => key === ' ';\nexport const isArrowKeys = key => key.indexOf('Arrow') === 0;\nexport const isHomeOrEndKeys = key => key === 'Home' || key === 'End';\nexport const isPageKeys = key => key.indexOf('Page') === 0;\nexport const isDeleteKeys = key => key === 'Delete' || key === 'Backspace'; // Non printable keys have a name, e.g. \"ArrowRight\", see the whole list:\n// https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values\n// We need to ignore shortcuts, for example: select all:\n// - Windows: Ctrl+A, event.ctrlKey is true\n// - macOS: ⌘ Command+A, event.metaKey is true\n\nexport function isPrintableKey(event) {\n  return event.key.length === 1 && event.ctrlKey === false && event.metaKey === false;\n}\nexport const GRID_MULTIPLE_SELECTION_KEYS = ['Meta', 'Control', 'Shift'];\nexport const GRID_CELL_EXIT_EDIT_MODE_KEYS = ['Enter', 'Escape', 'Tab'];\nexport const GRID_CELL_EDIT_COMMIT_KEYS = ['Enter', 'Tab'];\nexport const isMultipleKey = key => GRID_MULTIPLE_SELECTION_KEYS.indexOf(key) > -1;\nexport const isCellEnterEditModeKeys = event => isEnterKey(event.key) || isDeleteKeys(event.key) || isPrintableKey(event);\nexport const isCellExitEditModeKeys = key => GRID_CELL_EXIT_EDIT_MODE_KEYS.indexOf(key) > -1;\nexport const isCellEditCommitKeys = key => GRID_CELL_EDIT_COMMIT_KEYS.indexOf(key) > -1;\nexport const isNavigationKey = key => isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);\nexport const isKeyboardEvent = event => !!event.key;\nexport const isHideMenuKey = key => isTabKey(key) || isEscapeKey(key);"],"mappings":"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"},"metadata":{},"sourceType":"module"}