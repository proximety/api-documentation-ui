{"ast":null,"code":"import _defineProperty from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"id\"],\n    _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nvar missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport var useGridRowEditing = function useGridRowEditing(apiRef, props) {\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      rowModesModel = _React$useState2[0],\n      setRowModesModel = _React$useState2[1];\n\n  var rowModesModelRef = React.useRef(rowModesModel);\n  var prevRowModesModel = React.useRef({});\n  var focusTimeout = React.useRef(null);\n  var nextFocusedCell = React.useRef(null);\n  var processRowUpdate = props.processRowUpdate,\n      onProcessRowUpdateError = props.onProcessRowUpdateError,\n      rowModesModelProp = props.rowModesModel,\n      onRowModesModelChange = props.onRowModesModelChange,\n      signature = props.signature;\n\n  var runIfEditModeIsRow = function runIfEditModeIsRow(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Row) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n\n  var throwIfNotEditable = React.useCallback(function (id, field) {\n    var params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  var throwIfNotInMode = React.useCallback(function (id, mode) {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(\"MUI: The row with id=\".concat(id, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    var rowParams = apiRef.current.getRowParams(params.id);\n\n    var newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  var handleCellFocusIn = React.useCallback(function (params) {\n    nextFocusedCell.current = params;\n  }, []);\n  var handleCellFocusOut = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(function () {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        var rowParams = apiRef.current.getRowParams(params.id);\n\n        var newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      var reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        var columnFields = gridColumnFieldsSelector(apiRef).filter(function (field) {\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        var rowParams = apiRef.current.getRowParams(params.id);\n\n        var newParams = _extends({}, rowParams, {\n          reason: reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      var _reason;\n\n      if (isPrintableKey(event)) {\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        _reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        _reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (_reason) {\n        var _rowParams = apiRef.current.getRowParams(params.id);\n\n        var _newParams = _extends({}, _rowParams, {\n          field: params.field,\n          reason: _reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', _newParams, event);\n      }\n    }\n  }, [apiRef]);\n  var handleRowEditStart = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        reason = params.reason;\n    var startRowEditModeParams = {\n      id: id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  var handleRowEditStop = React.useCallback(function (params) {\n    var id = params.id,\n        reason = params.reason,\n        field = params.field;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    var cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    var ignoreModifications = reason === 'escapeKeyDown';\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(function (fieldProps) {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id: id,\n      ignoreModifications: ignoreModifications,\n      field: field,\n      cellToFocusAfter: cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  var getRowMode = React.useCallback(function (id) {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  var updateRowModesModel = React.useCallback(function (newModel) {\n    var isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      var details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  }, [apiRef, onRowModesModelChange, props.rowModesModel, signature]);\n  var updateRowInRowModesModel = React.useCallback(function (id, newProps) {\n    var newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  var updateOrDeleteRowState = React.useCallback(function (id, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var updateOrDeleteFieldState = React.useCallback(function (id, field, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], _defineProperty({}, field, _extends({}, newProps)));\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var startRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStartRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        fieldToFocus = params.fieldToFocus,\n        deleteValue = params.deleteValue;\n    var columnFields = gridColumnFieldsSelector(apiRef);\n    var newProps = columnFields.reduce(function (acc, field) {\n      var cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      var shouldDeleteValue = deleteValue && fieldToFocus === field;\n      acc[field] = {\n        value: shouldDeleteValue ? '' : apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, updateOrDeleteRowState]);\n  var stopRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStopRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n        ignoreModifications = params.ignoreModifications,\n        focusedField = params.field,\n        _params$cellToFocusAf = params.cellToFocusAfter,\n        cellToFocusAfter = _params$cellToFocusAf === void 0 ? 'none' : _params$cellToFocusAf;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    var finishRowEditMode = function finishRowEditMode() {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    var isSomeFieldProcessingProps = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.isProcessingProps;\n    });\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    var hasSomeFieldWithError = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.error;\n    });\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    var rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      var handleError = function handleError(errorThrown) {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(function (finalRowUpdate) {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, updateOrDeleteRowState, updateRowInRowModesModel]);\n  var setRowEditingEditCellValue = React.useCallback(function (params) {\n    var id = params.id,\n        field = params.field,\n        value = params.value;\n    throwIfNotEditable(id, field);\n    var column = apiRef.current.getColumn(field);\n    var row = apiRef.current.getRow(id);\n    var parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    var newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(function (resolve) {\n      var promises = [];\n\n      if (column.preProcessEditCellProps) {\n        var hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        var _editingState$id = editingState[id],\n            otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        var promise = Promise.resolve(column.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: newProps,\n          hasChanged: hasChanged,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            thisField = _ref2[0],\n            fieldProps = _ref2[1];\n\n        if (thisField === field) {\n          return;\n        }\n\n        var fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        var _editingState$id2 = editingState[id],\n            otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        var promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(function () {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  var getRowWithUpdatedValuesFromRowEditing = React.useCallback(function (id) {\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n\n    var rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          field = _ref4[0],\n          fieldProps = _ref4[1];\n\n      var column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  var editingApi = {\n    getRowMode: getRowMode,\n    startRowEditMode: startRowEditMode,\n    stopRowEditMode: stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(function () {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(function () {\n    var idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    var copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = rowModesModel;\n    Object.entries(rowModesModel).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          id = _ref6[0],\n          params = _ref6[1];\n\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      var prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      var originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","gridRowsIdToIdLookupSelector","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","useState","rowModesModel","setRowModesModel","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","signature","runIfEditModeIsRow","callback","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","deleteValue","startRowEditMode","handleRowEditStop","unstable_runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","editingState","state","disableIgnoreModificationsIfProcessingProps","Object","values","some","fieldProps","isProcessingProps","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","isEditing","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","reduce","acc","cellParams","shouldDeleteValue","value","getCellValue","error","setCellFocus","updateStateToStopRowEditMode","focusedField","finishRowEditMode","unstable_moveFocusToRelativeCell","row","isSomeFieldProcessingProps","hasSomeFieldWithError","rowUpdate","unstable_getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","getRowWithUpdatedValuesFromRowEditing","valueSetter","editingApi","unstable_setRowEditingEditCellValue","idToIdLookup","copyOfPrevRowModesModel","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"sources":["C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridRowEditing.new.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is depricated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        if (reason) {\n          event.preventDefault(); // Prevent going to the next element in the tab sequence\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.deleteKeyDown || reason === GridRowEditStartReasons.printableKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (!ignoreModifications && !props.disableIgnoreModificationsIfProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications if any field is processing its props.\n      ignoreModifications = Object.values(editingState[id]).some(fieldProps => {\n        return fieldProps.isProcessingProps;\n      });\n    }\n\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef, props.disableIgnoreModificationsIfProcessingProps]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onRowModesModelChange(newModel, details);\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  }, [apiRef, onRowModesModelChange, props.rowModesModel, signature]);\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      const shouldDeleteValue = deleteValue && fieldToFocus === field;\n      acc[field] = {\n        value: shouldDeleteValue ? '' : apiRef.current.getCellValue(id, field),\n        error: false,\n        isProcessingProps: false\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  }, [apiRef, updateOrDeleteRowState]);\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = React.useCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.unstable_runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, updateOrDeleteRowState, updateRowInRowModesModel]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = rowModesModel;\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}