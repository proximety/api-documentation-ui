{"ast":null,"code":"import { createSelector } from '../../../utils/createSelector';\nimport { gridVisibleSortedRowEntriesSelector, gridVisibleSortedRowIdsSelector, gridVisibleSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n/**\n * @category Pagination\n * @ignore - do not document.\n */\n\nexport var gridPaginationSelector = function gridPaginationSelector(state) {\n  return state.pagination;\n};\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\n\nexport var gridPageSelector = createSelector(gridPaginationSelector, function (pagination) {\n  return pagination.page;\n});\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\n\nexport var gridPageSizeSelector = createSelector(gridPaginationSelector, function (pagination) {\n  return pagination.pageSize;\n});\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\n\nexport var gridPageCountSelector = createSelector(gridPaginationSelector, function (pagination) {\n  return pagination.pageCount;\n});\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport var gridPaginationRowRangeSelector = createSelector(gridPaginationSelector, gridRowTreeSelector, gridRowTreeDepthSelector, gridVisibleSortedRowEntriesSelector, gridVisibleSortedTopLevelRowEntriesSelector, function (pagination, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) {\n  var visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  var topLevelFirstRowIndex = Math.min(pagination.pageSize * pagination.page, visibleTopLevelRowCount - 1);\n  var topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element\n\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  } // The tree is flat, there is no need to look for children\n\n\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n\n  var topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  var topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  var firstRowIndex = visibleSortedRowEntries.findIndex(function (row) {\n    return row.id === topLevelFirstRow.id;\n  });\n  var lastRowIndex = firstRowIndex;\n  var topLevelRowAdded = 0;\n\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    var row = visibleSortedRowEntries[lastRowIndex];\n    var depth = rowTree[row.id].depth;\n\n    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n      lastRowIndex += 1;\n    }\n\n    if (depth === 0) {\n      topLevelRowAdded += 1;\n    }\n  }\n\n  return {\n    firstRowIndex: firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport var gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridPaginationRowRangeSelector, function (visibleSortedRowEntries, paginationRange) {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport var gridPaginatedVisibleSortedGridRowIdsSelector = createSelector(gridVisibleSortedRowIdsSelector, gridPaginationRowRangeSelector, function (visibleSortedRowIds, paginationRange) {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});","map":{"version":3,"names":["createSelector","gridVisibleSortedRowEntriesSelector","gridVisibleSortedRowIdsSelector","gridVisibleSortedTopLevelRowEntriesSelector","gridRowTreeDepthSelector","gridRowTreeSelector","gridPaginationSelector","state","pagination","gridPageSelector","page","gridPageSizeSelector","pageSize","gridPageCountSelector","pageCount","gridPaginationRowRangeSelector","rowTree","rowTreeDepth","visibleSortedRowEntries","visibleSortedTopLevelRowEntries","visibleTopLevelRowCount","length","topLevelFirstRowIndex","Math","min","topLevelLastRowIndex","firstRowIndex","lastRowIndex","topLevelFirstRow","topLevelRowsInCurrentPageCount","findIndex","row","id","topLevelRowAdded","depth","gridPaginatedVisibleSortedGridRowEntriesSelector","paginationRange","slice","gridPaginatedVisibleSortedGridRowIdsSelector","visibleSortedRowIds"],"sources":["C:/Users/luluf/OneDrive/Documents/Proximety/api-documentation-ui/node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js"],"sourcesContent":["import { createSelector } from '../../../utils/createSelector';\nimport { gridVisibleSortedRowEntriesSelector, gridVisibleSortedRowIdsSelector, gridVisibleSortedTopLevelRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { gridRowTreeDepthSelector, gridRowTreeSelector } from '../rows/gridRowsSelector';\n/**\n * @category Pagination\n * @ignore - do not document.\n */\n\nexport const gridPaginationSelector = state => state.pagination;\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSelector = createSelector(gridPaginationSelector, pagination => pagination.page);\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageSizeSelector = createSelector(gridPaginationSelector, pagination => pagination.pageSize);\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\n\nexport const gridPageCountSelector = createSelector(gridPaginationSelector, pagination => pagination.pageCount);\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginationRowRangeSelector = createSelector(gridPaginationSelector, gridRowTreeSelector, gridRowTreeDepthSelector, gridVisibleSortedRowEntriesSelector, gridVisibleSortedTopLevelRowEntriesSelector, (pagination, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {\n  const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;\n  const topLevelFirstRowIndex = Math.min(pagination.pageSize * pagination.page, visibleTopLevelRowCount - 1);\n  const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + pagination.pageSize - 1, visibleTopLevelRowCount - 1); // The range contains no element\n\n  if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {\n    return null;\n  } // The tree is flat, there is no need to look for children\n\n\n  if (rowTreeDepth < 2) {\n    return {\n      firstRowIndex: topLevelFirstRowIndex,\n      lastRowIndex: topLevelLastRowIndex\n    };\n  }\n\n  const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];\n  const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;\n  const firstRowIndex = visibleSortedRowEntries.findIndex(row => row.id === topLevelFirstRow.id);\n  let lastRowIndex = firstRowIndex;\n  let topLevelRowAdded = 0;\n\n  while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {\n    const row = visibleSortedRowEntries[lastRowIndex];\n    const depth = rowTree[row.id].depth;\n\n    if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {\n      lastRowIndex += 1;\n    }\n\n    if (depth === 0) {\n      topLevelRowAdded += 1;\n    }\n  }\n\n  return {\n    firstRowIndex,\n    lastRowIndex: lastRowIndex - 1\n  };\n});\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowEntriesSelector = createSelector(gridVisibleSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\n\nexport const gridPaginatedVisibleSortedGridRowIdsSelector = createSelector(gridVisibleSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {\n  if (!paginationRange) {\n    return [];\n  }\n\n  return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}